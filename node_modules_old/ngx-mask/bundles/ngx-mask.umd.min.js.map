{"version":3,"sources":["ng://ngx-mask/app/ngx-mask/config.ts","node_modules/tslib/tslib.es6.js","ng://ngx-mask/app/ngx-mask/mask-applier.service.ts","ng://ngx-mask/app/ngx-mask/mask.service.ts","ng://ngx-mask/app/ngx-mask/mask.directive.ts","ng://ngx-mask/app/ngx-mask/mask.pipe.ts","ng://ngx-mask/app/ngx-mask/ngx-mask.module.ts"],"names":["config","InjectionToken","NEW_CONFIG","INITIAL_CONFIG","initialConfig","sufix","prefix","clearIfNotMatch","showTemplate","showMaskTyped","dropSpecialCharacters","specialCharacters","patterns","0","pattern","RegExp","9","optional","A","S","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","this","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","step","op","TypeError","done","value","pop","push","e","__read","o","m","r","ar","error","_config","_shift","Set","maskSpecialCharacters","maskAvailablePatterns","MaskApplierService","applyMaskWithPattern","inputValue","maskAndPattern","_a","mask","customPattern","applyMask","maskExpression","position","cb","undefined","cursor","result","multi","slice","inputArray","toString","split","inputSymbol","_checkSymbolMask","indexOf","shiftStep","test","add","_findSpecialChar","shift","newPosition","has","find","val","maskSymbol","Injectable","Inject","args","document","_elementRef","_renderer","_super","_this","_formElement","nativeElement","__extends","__","constructor","create","tslib_1.__extends","MaskService","maskIsShown","replace","isArray","onChange","_removeMask","_removeSufix","_removePrefix","isNumberValue","Number","resLen","applyValueChanges","maskedInput","activeElement","clearIfNotMatchFn","showMaskInInput","formElementProperty","_b","name","setProperty","specialCharactersForRemove","_regExpForRemove","map","item","join","DOCUMENT","ElementRef","Renderer2","_maskService","defineProperty","MaskDirective","_maskValue","_repeatPatternSymbols","_inputValue","onInput","el","caretShift","selectionStart","selectionEnd","_position","inputType","onBlur","onTouch","onFocus","keyCode","a","preventDefault","onPaste","MAX_SAFE_INTEGER","writeValue","__awaiter","_arguments","P","generator","Promise","resolve","reject","fulfilled","rejected","then","String","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","maskExp","match","reduce","accum","currval","index","_start","_end","repeatNumber","Directive","selector","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","Input","HostListener","MaskPipe","transform","Pipe","pure","NgxMaskModule","forRoot","configValue","ngModule","useValue","useFactory","_configFactory","deps","forChild","NgModule","exports","declarations","initConfig"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport interface IConfig {\n    sufix: string;\n    prefix: string;\n    clearIfNotMatch: boolean;\n    showTemplate: boolean;\n    showMaskTyped: boolean;\n    dropSpecialCharacters: boolean | string[];\n    specialCharacters: string[];\n    patterns: {\n        [character: string]: {\n            pattern: RegExp,\n            optional?: boolean\n        }\n    };\n}\n\nexport type optionsConfig = Partial<IConfig>;\nexport const config: InjectionToken<string> = new InjectionToken('config');\nexport const NEW_CONFIG: InjectionToken<string> = new InjectionToken('NEW_CONFIG');\nexport const INITIAL_CONFIG: InjectionToken<IConfig> = new InjectionToken('INITIAL_CONFIG');\n\nexport const initialConfig: IConfig = {\n    sufix: '',\n    prefix: '',\n    clearIfNotMatch: false,\n    showTemplate: false,\n    showMaskTyped: false,\n    dropSpecialCharacters: true,\n    specialCharacters: ['/', '(', ')', '.', ':', '-', ' ', '+', ',', '@', '[', ']', '\\\"', '\\''],\n    patterns: {\n        '0': {\n            pattern: new RegExp('\\\\d'),\n        },\n        '9': {\n            pattern: new RegExp('\\\\d'),\n            optional: true\n        },\n        'A': {\n            pattern: new RegExp('\\[a-zA-Z0-9\\]')\n        },\n        'S': {\n            pattern: new RegExp('\\[a-zA-Z\\]')\n        }\n    }\n};\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\nimport { config, IConfig } from './config';\n\n@Injectable()\nexport class MaskApplierService {\n\n    public dropSpecialCharacters: IConfig['dropSpecialCharacters'];\n    public showTemplate: IConfig['showTemplate'];\n    public clearIfNotMatch: IConfig['clearIfNotMatch'];\n    public maskExpression: string = '';\n    public maskSpecialCharacters: IConfig['specialCharacters'];\n    public maskAvailablePatterns: IConfig['patterns'];\n    public prefix: IConfig['prefix'];\n    public sufix: IConfig['sufix'];\n    public customPattern: IConfig['patterns'];\n\n\n    private _shift: Set<number>;\n\n    public constructor(\n        @Inject(config) protected _config: IConfig\n    ) {\n        this._shift = new Set();\n        this.maskSpecialCharacters = this._config!.specialCharacters;\n        this.maskAvailablePatterns = this._config.patterns;\n        this.clearIfNotMatch = this._config.clearIfNotMatch;\n        this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n        this.maskSpecialCharacters = this._config!.specialCharacters;\n        this.maskAvailablePatterns = this._config.patterns;\n        this.prefix = this._config.prefix;\n        this.sufix = this._config.sufix;\n\n\n    }\n    // tslint:disable-next-line:no-any\n    public applyMaskWithPattern(inputValue: string, maskAndPattern: [string, IConfig['patterns']]): string {\n      const [mask, customPattern] = maskAndPattern;\n      this.customPattern = customPattern;\n      return this.applyMask(inputValue, mask);\n    }\n    public applyMask(\n        inputValue: string,\n        maskExpression: string,\n        position: number = 0,\n        cb: Function = () => {}\n      ): string {\n        if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\n            return '';\n        }\n\n        let cursor: number = 0;\n        let result: string = ``;\n        let multi: boolean = false;\n\n        if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n            inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n        }\n\n        const inputArray: string[] = inputValue.toString()\n            .split('');\n\n        // tslint:disable-next-line\n        for (let i: number = 0, inputSymbol: string = inputArray[0]; i\n        < inputArray.length; i++, inputSymbol = inputArray[i]) {\n            if (cursor === maskExpression.length) {\n                break;\n            }\n            if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n                result += inputSymbol;\n                cursor += 2;\n            } else if (\n              maskExpression[cursor + 1] === '*' && multi\n              && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\n            ) {\n              result += inputSymbol;\n              cursor += 3;\n              multi = false;\n            } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])\n                && maskExpression[cursor + 1]\n                === '*') {\n                result += inputSymbol;\n                multi = true;\n            } else if (maskExpression[cursor + 1] === '?' && this._checkSymbolMask(\n                inputSymbol,\n                maskExpression[cursor + 2]\n            )) {\n                result += inputSymbol;\n                cursor += 3;\n            } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\n                result += inputSymbol;\n                cursor++;\n            } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n                result += maskExpression[cursor];\n                cursor++;\n                const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                    ? inputArray.length\n                    : cursor;\n                this._shift.add(shiftStep + this.prefix.length || 0);\n                i--;\n            } else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1\n                && this.maskAvailablePatterns[maskExpression[cursor]]\n                && this.maskAvailablePatterns[maskExpression[cursor]].optional) {\n                cursor++;\n                i--;\n            } else if ( (this.maskExpression[cursor + 1] === '*')\n              && (this._findSpecialChar(this.maskExpression[cursor + 2]))\n              && (this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2]) ) {\n              cursor += 3;\n              result += inputSymbol;\n            }\n        }\n\n\n        if (result.length + 1 === maskExpression.length\n            && this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {\n            result += maskExpression[maskExpression.length - 1];\n        }\n\n\n        let shift: number = 1;\n        let newPosition: number = position + 1;\n\n        while (this._shift.has(newPosition)) {\n            shift++;\n            newPosition++;\n        }\n\n        cb(this._shift.has(position) ? shift : 0);\n        let res: string = `${this.prefix}${result}`;\n        res = this.sufix &&\n              cursor === maskExpression.length\n            ? `${this.prefix}${result}${this.sufix}`\n            : `${this.prefix}${result}`;\n        return res;\n    }\n    public _findSpecialChar (inputSymbol: string): undefined | string {\n      const symbol: string | undefined = this.maskSpecialCharacters\n          .find( (val: string) => val === inputSymbol);\n      return symbol ;\n    }\n\n    private _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean {\n      this.maskAvailablePatterns = this.customPattern\n        ? this.customPattern\n        : this.maskAvailablePatterns;\n        return this.maskAvailablePatterns[maskSymbol]\n            && this.maskAvailablePatterns[maskSymbol].pattern\n            && this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol);\n    }\n}\n","import { ElementRef, Inject, Injectable, Renderer2 } from '@angular/core';\nimport { config, IConfig } from './config';\nimport { DOCUMENT } from '@angular/common';\nimport { MaskApplierService } from './mask-applier.service';\n\n@Injectable()\nexport class MaskService extends MaskApplierService {\n  public maskExpression: string = '';\n  public isNumberValue: boolean = false;\n  public showMaskTyped: boolean = false;\n  public maskIsShown: string = '';\n  private _formElement: HTMLInputElement;\n  // tslint:disable-next-line\n  public onChange = (_: any) => {};\n  public onTouch = () => {};\n  public constructor(\n    // tslint:disable-next-line\n    @Inject(DOCUMENT) private document: any,\n    @Inject(config) protected _config: IConfig,\n    private _elementRef: ElementRef,\n    private _renderer: Renderer2\n  ) {\n    super(_config);\n    this._formElement = this._elementRef.nativeElement;\n  }\n\n  public applyMask(\n    inputValue: string,\n    maskExpression: string,\n    position: number = 0,\n    cb: Function = () => {}\n  ): string  {\n\n    this.maskIsShown = this.showMaskTyped\n        ? this.maskExpression.replace(/[0-9]/g, '_')\n        : '';\n    if (!inputValue && this.showMaskTyped) {\n      return this.prefix + this.maskIsShown;\n    }\n    const result: string  = super.applyMask(\n      inputValue,\n      maskExpression,\n      position,\n      cb\n    );\n    Array.isArray(this.dropSpecialCharacters)\n        ? this.onChange(this._removeMask(this._removeSufix(this._removePrefix(result)), this.dropSpecialCharacters))\n        : this.dropSpecialCharacters === true\n         ? this.onChange(\n          this.isNumberValue\n             ? Number(this._removeMask(this._removeSufix(this._removePrefix(result)), this.maskSpecialCharacters))\n             : this._removeMask(this._removeSufix(this._removePrefix(result)), this.maskSpecialCharacters)\n            )\n         : this.onChange(this._removeSufix(this._removePrefix(result)));\n          let ifMaskIsShown: string = '';\n          if (!this.showMaskTyped) {\n            return result;\n          }\n          const resLen: number = result.length;\n          const prefNmask: string = this.prefix + this.maskIsShown;\n          ifMaskIsShown = prefNmask.slice(resLen);\n    return result + ifMaskIsShown;\n  }\n\n  public applyValueChanges(\n    position: number = 0,\n    cb: Function = () => {}\n  ): void {\n    const maskedInput: string | number = this.applyMask(\n      this._formElement.value,\n      this.maskExpression,\n      position,\n      cb\n    );\n    this._formElement.value = maskedInput;\n    if (this._formElement === this.document.activeElement) {\n      return;\n    }\n    this.clearIfNotMatchFn();\n  }\n\n  public showMaskInInput(): void {\n    if (this.showMaskTyped) {\n      this.maskIsShown = this.maskExpression.replace(/[0-9]/g, '_');\n    }\n  }\n\n  public clearIfNotMatchFn(): void {\n    if (\n      this.clearIfNotMatch === true &&\n      this.maskExpression.length !== this._formElement.value.length\n    ) {\n      this.formElementProperty = ['value', ''];\n      this.applyMask(this._formElement.value, this.maskExpression);\n    }\n  }\n\n  public set formElementProperty([name, value]: [string, string | boolean]) {\n    this._renderer.setProperty(this._formElement, name, value);\n  }\n\n  private _removeMask(\n    value: string,\n    specialCharactersForRemove: string[]\n  ): string {\n    return value\n      ? value.replace(this._regExpForRemove(specialCharactersForRemove), '')\n      : value;\n  }\n\n  private _removePrefix(value: string): string {\n    if (!this.prefix) {\n      return value;\n    }\n    return value\n      ? value.replace(this.prefix, '')\n      : value;\n  }\n\n  private _removeSufix(value: string): string {\n    if (!this.sufix) {\n      return value;\n    }\n    return value\n      ? value.replace(this.sufix, '')\n      : value;\n  }\n\n  private _regExpForRemove(specialCharactersForRemove: string[]): RegExp {\n    return new RegExp(\n      specialCharactersForRemove.map((item: string) => `\\\\${item}`).join('|'),\n      'gi'\n    );\n  }\n}\n","import {\n  Directive,\n  forwardRef,\n  HostListener,\n  Inject,\n  Input\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MaskService } from './mask.service';\nimport { IConfig } from './config';\n\n@Directive({\n  selector: '[mask]',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MaskDirective),\n      multi: true\n    },\n    MaskService\n  ]\n})\nexport class MaskDirective implements ControlValueAccessor {\n  private _maskValue: string;\n  private _inputValue: string;\n  private _position: number | null = null;\n  // tslint:disable-next-line\n  private _start: number;\n  private _end: number;\n  // tslint:disable-next-line\n  public onChange = (_: any) => { };\n  public onTouch = () => { };\n  public constructor(\n    // tslint:disable-next-line\n    @Inject(DOCUMENT) private document: any,\n    private _maskService: MaskService\n  ) { }\n\n\n  @Input('mask')\n  public set maskExpression(value: string) {\n    this._maskValue = value || '';\n    if (!this._maskValue) {\n      return;\n    }\n    this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue);\n    this._maskService.formElementProperty = [\n      'value',\n      this._maskService.applyMask(\n        this._inputValue,\n        this._maskService.maskExpression\n      )\n    ];\n  }\n\n  @Input()\n  public set specialCharacters(value: IConfig['specialCharacters']) {\n    if (\n      !value ||\n      !Array.isArray(value) ||\n      (Array.isArray(value) && !value.length)\n    ) {\n      return;\n    }\n    this._maskService.maskSpecialCharacters = value;\n  }\n\n  @Input()\n  public set patterns(value: IConfig['patterns']) {\n    if (!value) {\n      return;\n    }\n    this._maskService.maskAvailablePatterns = value;\n  }\n\n  @Input()\n  public set prefix(value: IConfig['prefix']) {\n    if (!value) {\n      return;\n    }\n    this._maskService.prefix = value;\n  }\n\n  @Input()\n  public set sufix(value: IConfig['sufix']) {\n    if (!value) {\n      return;\n    }\n    this._maskService.sufix = value;\n  }\n\n  @Input()\n  public set dropSpecialCharacters(value: IConfig['dropSpecialCharacters']) {\n    this._maskService.dropSpecialCharacters = value;\n  }\n\n  @Input()\n  public set showMaskTyped(value: IConfig['showMaskTyped']) {\n    if (!value) {\n      return;\n    }\n    this._maskService.showMaskTyped = value;\n  }\n\n  @Input()\n  public set showTemplate(value: IConfig['showTemplate']) {\n    this._maskService.showTemplate = value;\n  }\n\n  @Input()\n  public set clearIfNotMatch(value: IConfig['clearIfNotMatch']) {\n    this._maskService.clearIfNotMatch = value;\n  }\n\n  @HostListener('input', ['$event'])\n  public onInput(e: KeyboardEvent): void {\n    const el: HTMLInputElement = e.target as HTMLInputElement;\n    this._inputValue = el.value;\n    if (!this._maskValue) {\n      this.onChange(el.value);\n      return;\n    }\n    const position: number = (el.selectionStart as number) === 1\n      ? (el.selectionStart as number) + this._maskService.prefix.length\n      : el.selectionStart as number;\n    let caretShift: number = 0;\n    this._maskService.applyValueChanges(\n      position,\n      (shift: number) => (caretShift = shift)\n    );\n    // only set the selection if the element is active\n    if (this.document.activeElement !== el) {\n      return;\n    }\n    el.selectionStart = el.selectionEnd =\n      this._position !== null\n        ? this._position\n        : position +\n        // tslint:disable-next-line\n        ((e as any).inputType === 'deleteContentBackward' ? 0 : caretShift);\n    this._position = null;\n  }\n\n  @HostListener('blur')\n  public onBlur(): void {\n    this._maskService.clearIfNotMatchFn();\n    this.onTouch();\n  }\n\n  @HostListener('click', ['$event'])\n  public onFocus(e: MouseEvent | KeyboardEvent): void {\n    const el: HTMLInputElement = e.target as HTMLInputElement;\n    if (\n      el !== null && el.selectionStart !== null &&\n      el.selectionStart === el.selectionEnd &&\n      el.selectionStart > this._maskService.prefix.length &&\n      // tslint:disable-next-line\n      (e as any).keyCode !== 38\n    ) {\n      return;\n    }\n    if (this._maskService.showMaskTyped) {\n      this._maskService.maskIsShown = this._maskService.maskExpression.replace(/[0-9]/g, '_');\n    }\n    el.value = !el.value || el.value === this._maskService.prefix\n      ? this._maskService.prefix + this._maskService.maskIsShown\n      : el.value;\n    /** fix of cursor position with prefix when mouse click occur */\n    if (((el.selectionStart as number) || (el.selectionEnd as number)) <= this._maskService.prefix.length) {\n      el.selectionStart = this._maskService.prefix.length;\n      return;\n    }\n  }\n\n  @HostListener('keydown', ['$event'])\n  public a(e: KeyboardEvent): void {\n    const el: HTMLInputElement = e.target as HTMLInputElement;\n    if (e.keyCode === 38) {\n      e.preventDefault();\n    }\n    if (e.keyCode === 37 || e.keyCode === 8) {\n      if ((el.selectionStart as number) <= this._maskService.prefix.length\n        && (el.selectionEnd as number) <= this._maskService.prefix.length) {\n        e.preventDefault();\n      }\n      this.onFocus(e);\n      if (e.keyCode === 8\n        && el.selectionStart === 0\n        && el.selectionEnd === el.value.length) {\n        el.value = this._maskService.prefix;\n        this._position = this._maskService.prefix ? this._maskService.prefix.length : 1;\n        this.onInput(e);\n      }\n    }\n  }\n\n  @HostListener('paste')\n  public onPaste(): void {\n    this._position = Number.MAX_SAFE_INTEGER;\n  }\n\n  /** It writes the value in the input */\n  public async writeValue(inputValue: string): Promise<void> {\n    if (inputValue === undefined) {\n      inputValue = '';\n    }\n    if (typeof inputValue === 'number') {\n      inputValue = String(inputValue);\n      this._maskService.isNumberValue = true;\n    }\n    inputValue && this._maskService.maskExpression ||\n      this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped)\n      ? (this._maskService.formElementProperty = [\n        'value',\n        this._maskService.applyMask(\n          inputValue,\n          this._maskService.maskExpression\n        )\n      ])\n      : (this._maskService.formElementProperty = ['value', inputValue]);\n    this._inputValue = inputValue;\n  }\n\n  // tslint:disable-next-line\n  public registerOnChange(fn: any): void {\n    this.onChange = fn;\n    this._maskService.onChange = this.onChange;\n  }\n\n  // tslint:disable-next-line\n  public registerOnTouched(fn: any): void {\n    this.onTouch = fn;\n  }\n\n  /** It disables the input element */\n  public setDisabledState(isDisabled: boolean): void {\n    this._maskService.formElementProperty = ['disabled', isDisabled];\n  }\n  private _repeatPatternSymbols(maskExp: string): string {\n    return maskExp.match(/{[0-9a-zA-Z]}/)\n      && maskExp.split('')\n        .reduce((accum: string, currval: string, index: number): string => {\n          this._start = (currval === '{') ? index : this._start;\n\n          if (currval !== '}') {\n            return this._maskService._findSpecialChar(currval) ? accum + currval : accum;\n          }\n          this._end = index;\n          const repeatNumber: number = Number(maskExp\n            .slice(this._start + 1, this._end));\n          const repaceWith: string = new Array(repeatNumber + 1)\n            .join(maskExp[this._start - 1]);\n          return accum + repaceWith;\n        }, '') || maskExp;\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { MaskApplierService } from './mask-applier.service';\nimport { IConfig } from './config';\n\n@Pipe({\n  name: 'mask',\n  pure: true\n})\nexport class MaskPipe implements PipeTransform {\n\n  public constructor(private _maskService: MaskApplierService) { }\n\n  public transform(value: string|number, mask: string | [string, IConfig['patterns']]): string {\n    if (!value) {\n      return '';\n    }\n    if (typeof mask === 'string') {\n      return this._maskService.applyMask(`${value}`, mask);\n    }\n    return this._maskService.applyMaskWithPattern(`${value}`, mask);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { config, INITIAL_CONFIG, initialConfig, NEW_CONFIG, optionsConfig } from './config';\nimport { MaskApplierService } from './mask-applier.service';\nimport { MaskDirective } from './mask.directive';\nimport { MaskPipe } from './mask.pipe';\n\n@NgModule({\n  providers: [MaskApplierService],\n  exports: [MaskDirective, MaskPipe],\n  declarations: [MaskDirective, MaskPipe]\n})\nexport class NgxMaskModule {\n\n  public static forRoot(configValue?: optionsConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxMaskModule,\n      providers: [\n        {\n          provide: NEW_CONFIG,\n          useValue: configValue\n        },\n        {\n          provide: INITIAL_CONFIG,\n          useValue: initialConfig\n        },\n        {\n          provide: config,\n          useFactory: _configFactory,\n          deps: [INITIAL_CONFIG, NEW_CONFIG]\n        },\n      ]\n    };\n  }\n  public static forChild(configValue?: optionsConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxMaskModule,\n    };\n  }\n}\n\n/**\n * @internal\n */\nexport function _configFactory\n(initConfig: optionsConfig, configValue: optionsConfig | (() => optionsConfig)): Function | optionsConfig {\n  return (typeof configValue === 'function') ? configValue() : { ...initConfig, ...configValue };\n}\n"]}